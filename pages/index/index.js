Page({
  data: {
    imageBase64: '',
    debugText: ''
  },

  onLoad() {
    this.isUnloaded = false
    this.loadImageLoop()
  },

  onUnload() {
    this.isUnloaded = true
  },

  // ËßÜÈ¢ëÊµÅÂæ™ÁéØÊãâÂèñÈÄªËæë
  loadImageLoop() {
    if (this.isUnloaded) return

    const startTime = Date.now()
    const timestamp = startTime
    const url = `http://172.20.10.2/capture?time=${timestamp}`

    wx.request({
      url: url,
      method: 'GET',
      responseType: 'arraybuffer',
      success: (res) => {
        const elapsed = Date.now() - startTime
        const base64 = wx.arrayBufferToBase64(res.data)

        this.setData({
          imageBase64: 'data:image/jpeg;base64,' + base64,
          // debugText: `‚úÖ ËßÜÈ¢ëÂ∏ßËÄóÊó∂: ${elapsed}ms`
        })

        const nextDelay = Math.max(100, 300 - elapsed)
        setTimeout(() => this.loadImageLoop(), nextDelay)
      },
      fail: (err) => {
        console.error("‚ùå ÊãâÂèñËßÜÈ¢ëÂ∏ßÂ§±Ë¥•", err)
        this.setData({
          debugText: "‚ö†Ô∏è ËßÜÈ¢ëÂ∏ßËØ∑Ê±ÇÂ§±Ë¥•"
        })
        setTimeout(() => this.loadImageLoop(), 1000)
      }
    })
  },

  // ÁÇπÂáªÊåâÈíÆÊâßË°å‰∏ÄÊ¨°È´òÊ∏ÖÊãçÁÖß + ‰∏ä‰º†ËØÜÂà´
  captureHD() {
    const timestamp = Date.now()
    const url = `http://172.20.10.2/capture_hd?time=${timestamp}`
    const serverURL = 'http://172.20.10.3:5000/upload_photo'

    this.setData({ debugText: "üì∏ ÊãçÁÖß‰∏≠..." })

    wx.downloadFile({
      url: url,
      success: (res) => {
        if (res.statusCode === 200) {
          this.setData({ debugText: "üì§ ‰∏ä‰º†‰∏≠..." })

          wx.uploadFile({
            url: serverURL,
            filePath: res.tempFilePath,
            name: 'file',
            success: (uploadRes) => {
              try {
                const result = JSON.parse(uploadRes.data)
                console.log("üß† ËØÜÂà´ÁªìÊûúÔºö", result)

                if (result.faces_detected > 0) {
                  const names = result.results.map(item => item.name).join(', ')
                  
                  if (names.includes("Unknown")) {
                    this.setData({ debugText: "‚ö†Ô∏è Êú™ËØÜÂà´Ë∫´‰ªΩÔºåÁ¶ÅÊ≠¢ÂºÄÈó®" })
                    wx.showToast({ title: 'Êú™Áü•‰∫∫ËÑ∏', icon: 'none' })
                  } else {
                    this.setData({ debugText: `‚úÖ ËØÜÂà´Âà∞Ôºö${names}ÔºåÂ∑≤ÂºÄÈó®` })
                    wx.showToast({ title: `ËØÜÂà´Âà∞Ôºö${names}`, icon: 'success' })
                  }
                } else {
                  this.setData({ debugText: "‚ùå Êú™ËØÜÂà´ÔºåÁ¶ÅÊ≠¢ÂºÄÈó®" })
                  wx.showToast({ title: 'Êú™ËØÜÂà´', icon: 'none' })
                }
              } catch (e) {
                console.error("‚ö†Ô∏è JSONËß£ÊûêÂ§±Ë¥•", e)
                this.setData({ debugText: "‚ö†Ô∏è ËøîÂõûÂºÇÂ∏∏" })
                wx.showToast({ title: 'ËØÜÂà´ÂºÇÂ∏∏', icon: 'none' })
              }
            },
            fail: (err) => {
              console.error("‚ùå ‰∏ä‰º†Â§±Ë¥•", err)
              this.setData({ debugText: "‚ùå ‰∏ä‰º†Â§±Ë¥•" })
              wx.showToast({ title: '‰∏ä‰º†Â§±Ë¥•', icon: 'none' })
            }
          })
        } else {
          this.setData({ debugText: "‚ö†Ô∏è ÊãçÁÖßÂ§±Ë¥•" })
          wx.showToast({ title: '‰∏ãËΩΩÂ§±Ë¥•', icon: 'none' })
        }
      },
      fail: () => {
        this.setData({ debugText: "‚ùå ËØ∑Ê±ÇÂ§±Ë¥•" })
        wx.showToast({ title: 'ËØ∑Ê±ÇÂ§±Ë¥•', icon: 'none' })
      }
    })
  },

  goToAI() {
    wx.navigateTo({
      url: '/pages/ai-assistant/ai-assistant'
    });
  }
})
